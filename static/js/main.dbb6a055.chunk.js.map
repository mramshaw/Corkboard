{"version":3,"sources":["Note.js","Board.js","serviceWorker.js","index.js"],"names":["Note","props","textRef","React","useRef","useState","right","randomBetween","window","innerWidth","top","innerHeight","noteStyle","editing","setEditing","x","y","units","Math","ceil","random","edit","save","onChange","current","value","id","remove","onRemove","useEffect","focus","select","className","style","ref","defaultValue","children","onClick","Board","notes","setNotes","count","a","async","Error","url","urlNotes","fetch","response","json","console","log","split","forEach","sentence","index","push","note","getNotes","uniqueId","setUniqueId","update","newText","updatedNotes","map","filter","key","text","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mPAsEeA,MAlEf,SAAcC,GAEV,IAAMC,EAAUC,IAAMC,OAAO,MAFZ,EAKGD,IAAME,SAAS,CAG/BC,MAAOC,EAAc,EAAGC,OAAOC,WAAc,IAAK,MAClDC,IAAOH,EAAc,EAAGC,OAAOG,YAAc,IAAK,QAJ/CC,EALU,sBAYaT,IAAME,UAAS,GAZ5B,mBAYVQ,EAZU,KAYDC,EAZC,KAoBjB,SAASP,EAAcQ,EAAGC,EAAGC,GACzB,OAAQF,EAAIG,KAAKC,KAAKD,KAAKE,UAAYJ,EAAID,IAAOE,EAGtD,SAASI,IACLP,GAAW,GAGf,SAASQ,IACLrB,EAAMsB,SAASrB,EAAQsB,QAAQC,MAAOxB,EAAMyB,IAC5CZ,GAAW,GAGf,SAASa,IACL1B,EAAM2B,SAAS3B,EAAMyB,IAyBzB,OA9CAvB,IAAM0B,WAAU,WACRhB,IACAX,EAAQsB,QAAQM,QAChB5B,EAAQsB,QAAQO,YAErB,CAAClB,IA0CA,kBAAC,IAAD,KACMA,EAtBF,yBAAKmB,UAAU,OAAOC,MAAOrB,GACzB,8BAAUsB,IAAKhC,EAASiC,aAAclC,EAAMmC,WAE5C,4BAAQC,QAASf,GAAjB,SAOJ,yBAAKU,UAAU,OAAOC,MAAOrB,GACzB,2BAAIX,EAAMmC,UACV,8BACI,4BAAQC,QAAShB,GAAjB,QACA,4BAAQgB,QAASV,GAAjB,SCwCLW,MA7Ff,SAAerC,GAAQ,IAAD,EAEQE,IAAME,SAAS,IAFvB,mBAEXkC,EAFW,KAEJC,EAFI,KAGlBrC,IAAM0B,WAAU,YAKhB,SAAwBY,GAAxB,cAAAC,EAAAC,OAAA,mDAGyB,kBAAVF,EAHf,yCAIe,IAAIG,MAAM,iCAJzB,YAMQH,EAAQ,KANhB,yCAOe,IAAIG,MAAM,wCAPzB,cAWQC,EAXR,8DAWqEJ,GAC7DK,EAAW,GAZnB,oBAAAJ,EAAA,MAeyBK,MAAMF,IAf/B,cAeQG,EAfR,mBAAAN,EAAA,MAgBqBM,EAASC,QAhB9B,QAgBQA,EAhBR,gEAkBQC,QAAQC,IAAI,sCAAZ,MAlBR,2BAqBIF,EAAK,GAAGG,MAAM,MAAMC,SAChB,SAACC,EAAUC,GAAX,OAAqBT,EAASU,KAC3B,CACI9B,GAAI6B,EACJE,KAAMH,OAIjBd,EAASM,GA7Bb,yDAJIY,CAASzD,EAAMwC,SAChB,CAACxC,EAAMwC,QALQ,MAMctC,IAAME,SAASJ,EAAMwC,OANnC,mBAMXkB,EANW,KAMDC,EANC,KAsDlB,SAASC,EAAOC,EAASpC,GACrB,IAAMqC,EAAexB,EAAMyB,KACvB,SAAAP,GAAI,OAAKA,EAAK/B,KAAOA,EACjB+B,EADI,eAGGA,EAHH,CAIAA,KAAMK,OAGlBtB,EAASuB,GAGb,SAASpC,EAAOD,GACZ,IAAMqC,EAAexB,EAAM0B,QACvB,SAAAR,GAAI,OAAKA,EAAK/B,KAAOA,KAEzBc,EAASuB,GAeb,OACI,yBAAK/B,UAAU,SACVO,EAAMyB,KAdf,SAAkBP,GACd,OACI,kBAAC,EAAD,CACIS,IAAKT,EAAK/B,GACVA,GAAI+B,EAAK/B,GACTH,SAAUsC,EACVjC,SAAUD,GACT8B,EAAKA,SAQV,4BAAQpB,QAAS,kBA3CZ8B,EA2CsB,gBA1C/B3B,EAAS,GAAD,mBAAKD,GAAL,CACJ,CACIb,IAPRkC,GAAY,SAAAD,GAAQ,OAAMA,EAAW,KAC9BA,GAOCF,KAAMU,MAJlB,IAAaA,IA2CL,OChFNC,G,MAAcC,QACW,cAA7B7D,OAAO8D,SAASC,UAEe,UAA7B/D,OAAO8D,SAASC,UAEhB/D,OAAO8D,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BpC,QAAQC,IACN,iHAKEwB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB9B,QAAQC,IAAI,sCAGRwB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACLxC,QAAQwC,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,EAAD,CAAOnD,MAAO,KACdoD,SAASC,eAAe,oBDcnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,aAAwBxF,OAAO8D,SAAS2B,MACpDC,SAAW1F,OAAO8D,SAAS4B,OAIvC,OAGF1F,OAAO2F,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,aAAN,sBAEP5B,IAgEV,SAAiCM,EAAOC,GAEtC5B,MAAM2B,GACHK,MAAK,SAAA/B,GAEJ,IAAMoD,EAAcpD,EAASqD,QAAQC,IAAI,gBAEnB,MAApBtD,EAASuD,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BvE,OAAO8D,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLvC,QAAQC,IACN,oEArFAyD,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjC7B,QAAQC,IACN,iHAMJsB,EAAgBC,EAAOC,OCvC/BE,I","file":"static/js/main.dbb6a055.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Draggable from 'react-draggable';\n\nfunction Note(props) {\n\n    const textRef = React.useRef(null);\n\n    // Note no 'setter'\n    const [noteStyle] = React.useState({\n        // Note that a \"note\" is 150 pixels by 150 pixels\n        //     as defined in \"App.css\"\n        right: randomBetween(0, window.innerWidth  - 150, \"px\"),\n        top:   randomBetween(0, window.innerHeight - 150, \"px\")\n    });\n\n    const [editing, setEditing] = React.useState(false);\n    React.useEffect(() => {\n        if (editing) {\n            textRef.current.focus();\n            textRef.current.select();\n        }\n    }, [editing]); // Effect is only triggered if 'editing' changes\n\n    function randomBetween(x, y, units) {\n        return (x + Math.ceil(Math.random() * (y - x))) + units;\n    }\n\n    function edit() {\n        setEditing(true);\n    }\n\n    function save() {\n        props.onChange(textRef.current.value, props.id);\n        setEditing(false);\n    }\n\n    function remove() {\n        props.onRemove(props.id);\n    }\n\n    function renderForm() {\n        return (\n            <div className=\"note\" style={noteStyle}>\n                <textarea ref={textRef} defaultValue={props.children}>\n                </textarea>\n                <button onClick={save}>SAVE</button>\n            </div>\n        );\n    }\n\n    function renderDisplay() {\n        return (\n            <div className=\"note\" style={noteStyle}>\n                <p>{props.children}</p>\n                <span>\n                    <button onClick={edit}>EDIT</button>\n                    <button onClick={remove}>X</button>\n                </span>\n            </div>\n        );\n    }\n\n    return (\n        <Draggable>\n            {(editing) ? renderForm() : renderDisplay()}\n        </Draggable>\n    );\n}\n\nexport default Note;\n","import React from 'react';\nimport './App.css';\nimport Note from './Note';\n\nfunction Board(props) {\n\n    const [notes, setNotes] = React.useState([]);\n    React.useEffect(() => {\n        getNotes(props.count);\n    }, [props.count]);\n    const [uniqueId, setUniqueId] = React.useState(props.count);\n    \n    async function getNotes(count) {\n\n        // Sanity check count\n        if (typeof count !== \"number\") {\n            return new Error(\"board count must be a number\");\n        }\n        if (count > 100) {\n            return new Error(\"currently can only create 100 notes\");\n        }\n\n        // Now fetch the requested number of 'notes'\n        let url = `https://baconipsum.com/api/?type=all-meat&sentences=${count}`;\n        let urlNotes = [];\n        let response, json;\n        try {\n            response = await fetch(url);\n            json = await response.json();\n        } catch(err) {\n            console.log(\"Couldn't connect to the Bacon API: \", err);\n            return;\n        }\n        json[0].split(\". \").forEach(\n            (sentence, index) => urlNotes.push(\n               {\n                   id: index,\n                   note: sentence\n               }\n            )\n        );\n        setNotes(urlNotes);            \n    }\n\n    function nextId() {\n        setUniqueId(uniqueId => ( uniqueId + 1 ));\n        return uniqueId;\n    }\n\n    function add(text) {\n        setNotes([...notes,\n            {\n                id: nextId(),\n                note: text\n            }\n        ]);\n    }\n\n    function update(newText, id) {\n        const updatedNotes = notes.map(\n            note => (note.id !== id) ?\n                note :\n                {\n                    ...note,\n                    note: newText\n                }\n        );\n        setNotes(updatedNotes);\n    }\n\n    function remove(id) {\n        const updatedNotes = notes.filter(\n            note => (note.id !== id)\n        )\n        setNotes(updatedNotes);\n    }\n\n    function eachNote(note) {\n        return (\n            <Note\n                key={note.id}\n                id={note.id}\n                onChange={update}\n                onRemove={remove}>\n                {note.note}\n            </Note>\n        );\n    }\n\n    return (\n        <div className=\"board\">\n            {notes.map(eachNote)}\n            <button onClick={() => add(\"New Note\")}>+</button>\n        </div>\n    );\n}\n\nexport default Board;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from './Board';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Board count={25} />,\n  document.getElementById('react-container')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}