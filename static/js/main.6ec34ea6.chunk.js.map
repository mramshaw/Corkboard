{"version":3,"sources":["Note.js","Board.js","index.js"],"names":["Note","require","createReactClass","getInitialState","editing","componentWillMount","this","style","right","randomBetween","window","innerWidth","top","innerHeight","componentDidUpdate","state","refs","newText","focus","select","shouldComponentUpdate","nextProps","nextState","props","children","x","y","units","Math","ceil","random","edit","setState","save","onChange","value","id","remove","onRemove","renderForm","className","ref","defaultValue","onClick","renderDisplay","render","Board","notes","count","url","fetch","then","results","json","array","text","split","forEach","sentence","add","catch","err","console","log","nextId","uniqueId","note","update","map","filter","eachNote","key","ReactDOM","document","getElementById"],"mappings":"4NAqEeA,EAjEUC,EAAQ,EAEpBC,CAAiB,CAAC,YAAD,OAC1BC,gBAD0B,WAEtB,MAAO,CAACC,SAAS,IAErBC,mBAJ0B,WAOtBC,KAAKC,MAAQ,CACTC,MAAOF,KAAKG,cAAc,EAAGC,OAAOC,WAAc,IAAK,MACvDC,IAAON,KAAKG,cAAc,EAAGC,OAAOG,YAAc,IAAK,QAG/DC,mBAZ0B,WAalBR,KAAKS,MAAMX,UACXE,KAAKU,KAAKC,QAAQC,QAClBZ,KAAKU,KAAKC,QAAQE,WAG1BC,sBAlB0B,SAkBJC,EAAWC,GAE7B,OAAOhB,KAAKiB,MAAMC,WAAaH,EAAUG,UAClClB,KAAKS,QAAmBO,GAEnCb,cAvB0B,SAuBZgB,EAAGC,EAAGC,GAChB,OAAQF,EAAIG,KAAKC,KAAKD,KAAKE,UAAYJ,EAAID,IAAOE,GAEtDI,KA1B0B,WA2BtBzB,KAAK0B,SAAS,CAAC5B,SAAS,KAE5B6B,KA7B0B,WA8BtB3B,KAAKiB,MAAMW,SAAS5B,KAAKU,KAAKC,QAAQkB,MAAO7B,KAAKiB,MAAMa,IACxD9B,KAAK0B,SAAS,CAAC5B,SAAS,KAE5BiC,OAjC0B,WAkCtB/B,KAAKiB,MAAMe,SAAShC,KAAKiB,MAAMa,KAEnCG,WApC0B,WAqCtB,OACI,yBAAKC,UAAU,OAAOjC,MAAOD,KAAKC,OAC9B,8BAAUkC,IAAI,UAAUC,aAAcpC,KAAKiB,MAAMC,WAEjD,4BAAQmB,QAASrC,KAAK2B,MAAtB,UAIZW,cA7C0B,WA8CtB,OACI,yBAAKJ,UAAU,OAAOjC,MAAOD,KAAKC,OAC9B,2BAAID,KAAKiB,MAAMC,UACf,8BACI,4BAAQmB,QAASrC,KAAKyB,MAAtB,QACA,4BAAQY,QAASrC,KAAK+B,QAAtB,QAKhBQ,OAxD0B,WAyDtB,OAAQ,kBAAC,IAAD,KACFvC,KAAKS,MAAMX,QAAWE,KAAKiC,aAAejC,KAAKsC,oB,8NC5D7D,IAgFeE,EAhFU7C,EAAQ,EAEnBC,CAAiB,CAAC,YAAD,QAW3BC,gBAX2B,WAYvB,MAAO,CACH4C,MAAO,KAGf1C,mBAhB2B,WAgBL,IAAD,OACjB,GAAIC,KAAKiB,MAAMyB,MAAO,CAClB,IAAIC,EAAG,8DAA0D3C,KAAKiB,MAAMyB,OAC5EE,MAAMD,GACDE,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAK,OAAMA,EAAM,MACtBH,MAAK,SAAAI,GAAI,OAAOA,EAAKC,MAAM,SAC3BL,MAAK,SAAAG,GAAK,OAAMA,EAAMG,SAClB,SAAAC,GAAQ,OAAI,EAAKC,IAAID,SACzBE,OAAM,SAASC,GACZC,QAAQC,IAAI,oCAAqCF,QAIjEG,OA9B2B,WAgCvB,OADA1D,KAAK2D,SAAW3D,KAAK2D,UAAY,EAC1B3D,KAAK2D,YAEhBN,IAlC2B,SAkCvBJ,GACA,IAAMR,EAAK,sBACJzC,KAAKS,MAAMgC,OADP,CAEP,CACIX,GAAI9B,KAAK0D,SACTE,KAAMX,KAGdjD,KAAK0B,SAAS,CAACe,WAEnBoB,OA5C2B,SA4CpBlD,EAASmB,GACZ,IAAMW,EAAQzC,KAAKS,MAAMgC,MAAMqB,KAC3B,SAAAF,GAAI,OAAKA,EAAK9B,KAAOA,EACjB8B,E,yWADI,IAGGA,EAHH,CAIAA,KAAMjD,OAGlBX,KAAK0B,SAAS,CAACe,WAEnBV,OAvD2B,SAuDpBD,GACH,IAAMW,EAAQzC,KAAKS,MAAMgC,MAAMsB,QAC3B,SAAAH,GAAI,OAAKA,EAAK9B,KAAOA,KAEzB9B,KAAK0B,SAAS,CAACe,WAEnBuB,SA7D2B,SA6DlBJ,GACL,OAAQ,kBAAC,EAAD,CAAMK,IAAKL,EAAK9B,GACTA,GAAI8B,EAAK9B,GACTF,SAAU5B,KAAK6D,OACf7B,SAAUhC,KAAK+B,QACjB6B,EAAKA,OAGtBrB,OArE2B,WAqEjB,IAAD,OACL,OAAQ,yBAAKL,UAAU,SACVlC,KAAKS,MAAMgC,MAAMqB,IAAI9D,KAAKgE,UAC3B,4BAAQ3B,QAAS,kBAAM,EAAKgB,IAAI,cAAhC,S,MCzEpBa,IAAS3B,OACP,kBAAC,EAAD,CAAOG,MAAO,KACdyB,SAASC,eAAe,qB","file":"static/js/main.6ec34ea6.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport Draggable from 'react-draggable'\n\nconst createReactClass = require('create-react-class');\n\nconst Note = createReactClass({\n    getInitialState() {\n        return {editing: false}\n    },\n    componentWillMount() {\n        // Note that a \"note\" is 150 pixels by 150 pixels\n        //     as defined in \"style.css\"\n        this.style = {\n            right: this.randomBetween(0, window.innerWidth  - 150, \"px\"),\n            top:   this.randomBetween(0, window.innerHeight - 150, \"px\")\n        }\n    },\n    componentDidUpdate() {\n        if (this.state.editing) {\n            this.refs.newText.focus()\n            this.refs.newText.select()\n        }\n    },\n    shouldComponentUpdate(nextProps, nextState) {\n        // Performance optimization: do not re-render if state unchanged\n        return this.props.children !== nextProps.children ||\n               this.state          !== nextState\n    },\n    randomBetween(x, y, units) {\n        return (x + Math.ceil(Math.random() * (y - x))) + units\n    },\n    edit() {\n        this.setState({editing: true})\n    },\n    save() {\n        this.props.onChange(this.refs.newText.value, this.props.id)\n        this.setState({editing: false})\n    },\n    remove() {\n        this.props.onRemove(this.props.id)\n    },\n    renderForm() {\n        return (\n            <div className=\"note\" style={this.style}>\n                <textarea ref=\"newText\" defaultValue={this.props.children}>\n                </textarea>\n                <button onClick={this.save}>SAVE</button>\n            </div>\n        )\n    },\n    renderDisplay() {\n        return (\n            <div className=\"note\" style={this.style}>\n                <p>{this.props.children}</p>\n                <span>\n                    <button onClick={this.edit}>EDIT</button>\n                    <button onClick={this.remove}>X</button>\n                </span>\n            </div>\n        )\n    },\n    render() {\n        return (<Draggable>\n            {(this.state.editing) ? this.renderForm() : this.renderDisplay()}\n        </Draggable>)\n    }\n})\n\nexport default Note\n","import React from 'react'\nimport './App.css'\nimport Note from './Note'\n\nconst createReactClass = require('create-react-class');\n\nconst Board = createReactClass({\n    propTypes: {\n        count: function(props, propName) {\n            if (typeof props[propName] !== \"number\") {\n                return new Error(\"board count must be a number\")\n            }\n            if (props[propName] > 100) {\n                return new Error(\"currently can only create 100 notes\")\n            }\n        }\n    },\n    getInitialState() {\n        return {\n            notes: []\n        }\n    },\n    componentWillMount() {\n        if (this.props.count) {\n            let url = `https://baconipsum.com/api/?type=all-meat&sentences=${this.props.count}`\n            fetch(url)\n                .then(results => results.json())\n                .then(array   => array[0])\n                .then(text    => text.split(\". \"))\n                .then(array   => array.forEach(\n                     sentence => this.add(sentence)))\n                .catch(function(err) {\n                    console.log(\"Couldn't connect to the Bacon API\", err)\n                })\n        }\n    },\n    nextId() {\n        this.uniqueId = this.uniqueId || 0\n        return this.uniqueId++\n    },\n    add(text) {\n        const notes = [\n            ...this.state.notes,\n            {\n                id: this.nextId(),\n                note: text\n            }\n        ] \n        this.setState({notes})\n    },\n    update(newText, id) {\n        const notes = this.state.notes.map(\n            note => (note.id !== id) ?\n                note :\n                {\n                    ...note,\n                    note: newText\n                }\n        )\n        this.setState({notes})\n    },\n    remove(id) {\n        const notes = this.state.notes.filter(\n            note => (note.id !== id)\n        )\n        this.setState({notes})\n    },\n    eachNote(note) {\n        return (<Note key={note.id}\n                       id={note.id}\n                       onChange={this.update}\n                       onRemove={this.remove}>\n                    {note.note}\n                </Note>)\n    },\n    render() {\n        return (<div className=\"board\">\n                    {this.state.notes.map(this.eachNote)}\n                    <button onClick={() => this.add(\"New Note\")}>+</button>\n                </div>\n        )\n    }\n})\n\nexport default Board\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from './Board';\nimport './index.css';\n\nReactDOM.render(\n  <Board count={25} />,\n  document.getElementById('react-container')\n);\n"],"sourceRoot":""}